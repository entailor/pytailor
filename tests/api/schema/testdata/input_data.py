inputs1 = {
    "wf_run_name": "of_lift_default",
    "create_array_environmental_conditions": {
        # all to all relationship, number of env conditions = nrHs x nrTp x NrDir
        "WaveDirection": {
            # "start": 180, "stop": 195, "step": 5
            "start": 180,
            "stop": 195,
            "step": 16,
        },
        "rulebased_wavegamma": True,
        "WaveHs": {
            # "start": 1.5, "stop": 4.5, "step": 1.5
            "start": 0.5,
            "stop": 1.5,
            "step": 1.1,
        },
        "WaveTp": {
            # "start": 2, "stop": 6, "step": 2
            "start": 3,
            "stop": 4,
            "step": 1.1,
        },
        "orcaflex_def": {  # maps to all orcaflex parameters #  Only allows for constant values
            "Environment": {
                "NumberOfWaveTrains": 1,  #  does not support multiple wave trains: if tp, hs, gamma is given, then it is replaced by array from previous task
                "WaveDirectionSpreadingExponent": 8,
                "WaveFrequencySpectrumDiscretisationMethod": "Equal energy",
                # "WaveGamma": 2.3, # replaced if rulebase wavegamme is True
                "WaveNumberOfSpectralDirections": 2,
                "WaveNumberOfWaveComponentsPerDirection": 2,
                "WaveType": "JONSWAP",  # must be aligned with parameters in array of environmental conditions which currently only supports Hs, Tp etc
            },
            "General": {
                "DynamicsSolutionMethod": "Implicit time domain",
                "ImplicitConstantTimeStep": 0.1,
                "StageDuration": [2, 100],
            },
        },
        "report_orcaflex_parameters_def": {  # to select which parameters you want to be tabulated
            "Environment": ["WaveHs", "WaveTp", "WaveDirection", "WaveGamma"],
            "General": ["StageDuration"],
            "Main Winch": [
                "Stiffness"
            ],  # all object variables in datfile are available
        },
    },
    "populate_seeds": {"nr_seeds": 1},  # populate seeds per datfile
    "limitations_def": {
        "dynamic_stage_for_results": 1,
        "objectsdata": [  # For now only one stage allowed for all objects
            {
                "object_name": "Main Winch",
                "object_type": "Winch",
                "object_extra": "",  # allowed names are compatible with OrcFxAPI objectExtra eg.oeTouchdown, oeEndA (for lines), RangeGraph is also allowed
                # "variable_names": {"X": {"max": 0,"min": 3},"Y","Z","Tension","Curvature"],
                "variable_names": ["Tension"],
                "Max": [50.0],
                "Min": [0.0],
            },
            {
                "object_name": "Sling 1",
                "object_type": "Winch",
                "object_extra": 1,  # allowed names are compatible with OrcFxAPI objectExtra eg.oeTouchdown, oeEndA (for lines), ore eg. 1 for winches document special case obs!
                "variable_names": ["Tension"],
                "Max": [10.0],
                "Min": [0.0],
            },
        ],
    },
    "extract_gumbel_results": {"frac": 0.9},
    "hs_tp_plot": {},
    "report": {
        "document_title": "Orcaflex lifting operation, autogenerated report",
        "document_filename": "Orcaflex lifting operation",
    },
}

inputs2 = {
    "panels": [
        {"id": "panel1", "SN_curves": [1, 2, 3]},
        {"id": "panel2", "SN_curves": [1, 2]},
        {"id": "panel3", "SN_curves": [1, 2, 3, 4]},
    ]
}


json_schema1 = {
    "$schema": "http://json-schema.org/schema#",
    "properties": {
        "panels": {
            "items": {
                "properties": {
                    "SN_curves": {"items": {"type": "integer"}, "type": "array"},
                    "id": {"type": "string"},
                },
                "required": ["SN_curves", "id"],
                "type": "object",
            },
            "type": "array",
        }
    },
    "required": ["panels"],
    "type": "object",
}

json_schema2_enums1 = {
    "wavedirection": [90, 180, 270],
    "WaveHs": [1.0, 2.0, 3.0],
    "wf_run_name": ["test", "test1"],
}
json_schema2_enumsnotvalid = {
    "wavedirection": [90, 180, 270],
    "WaveHs": [1.0, 2.0, 3.0],
    "wf_run_name": "test",
}
json_schema2_defaults = {"wavedirection": 90, "WaveHs": 2.0, "wf_run_name": "test"}
json_schema2_invaliddefaults = {
    "wavedirection": 90,
    "WaveHs": "2.0",
    "wf_run_name": "test",
}
json_schema2 = {
    "type": "object",
    "properties": {
        "wf_run_name": {
            "type": "string",
            "title": "enter workflow name",
            "description": "this name is searchable on your Workflows search page",
        },
        "wavedirection": {
            "type": "number",
            "enum": [90, 180, 270],
            "title": "wavedirection",
            "description": "available wave directions",
        },
        "WaveHs": {
            "type": "number",
            "exclusiveMinimum": 0,
            "title": "Significant Wave Height",
            "default": 2.0,
        },
    },
    "required": ["wf_run_name", "wavedirection", "WaveHs"],
}

json_schema3 = {
    "type": "object",
    "properties": {"General": {"type": "object"}},
    "required": ["General"],
}

json_schema3_defaults = {"General": {"Time": {"Timestep": 0.1}}}

inputs_multiple_datatypes = {
    "Environment": [
        {"object_name": "test1", "object_data": "string"},
        {"object_name": "test1", "object_data": 2},
        {"object_name": "test1", "object_data": [1, 2, 3]},
    ]
}

inputs_multiple_datatypes2 = {
    "oraflex": [
        {
            "Environment": [
                {"object_name": "test1", "object_data": "string"},
                {"object_name": "test1", "object_data": 2},
                {"object_name": "test1", "object_data": [1, 2, 3]},
            ]
        }
    ]
}

inputs_bool = {"test": True}

inputs_nested_anyof = {
    "populate_orcaflex": {
        "orcaflex_def": [
            {
                "model_object": "Environment",
                "object_data": [
                    {"data_name": "WaveHs", "data_value": [2.1, 2.2]},
                    {"data_name": "WaveDirection", "data_value": ["adjh", "sdf"]},
                ],
            },
            {
                "model_object": "General",
                "object_data": [{"data_name": "StageDuration", "data_value": [8, 10]}],
            },
            {
                "model_object": "Line6",
                "object_data": [
                    {"data_name": "LineType", "data_value": "Mooring line type"}
                ],
            },
        ]
    },
    "run_simulation": {"calculate_statics": False},
    "sim2hdf5": {
        "datadef": [
            {
                "object_type": "Line",
                "object_name": "Ring Line",
                "object_extra": "oeEndA",
                "variable_names": ["Effective tension", "X", "Y", "Z"],
            },
            {
                "object_type": "3D buoy",
                "object_name": "Base centre",
                "object_extra": 0,
                "variable_names": ["X", "Y", "Z"],
            },
        ]
    },
}

inputs_nested_anyof2 = {
    "populate_orcaflex": {
        "orcaflex_def": [
            {
                "type_name": "Environment",
                "type_data": [
                    {
                        "object_name": "Environment",
                        "object_data": [
                            {"data_name": "WaveType", "data_value": "JONSWAP"},
                            {"data_name": "WaveHs", "data_value": [2.1, 2.2]},
                            {"data_name": "WaveDirection", "data_value": 180},
                        ],
                    }
                ],
            },
            {
                "type_name": "General",
                "type_data": [
                    {
                        "object_name": "General",
                        "object_data": [
                            {"data_name": "StageDuration", "data_value": [8, 10]},
                            {"data_name": "WaveDirection", "data_value": 180},
                        ],
                    }
                ],
            },
            {
                "type_name": "Line",
                "type_data": [
                    {
                        "object_data": [
                            {
                                "data_name": "LineType",
                                "data_value": [
                                    "Mooring line type",
                                    "Mooring line type",
                                ],
                            }
                        ]
                    },
                    {
                        "object_name": "Line6",
                        "object_data": [{"data_name": "Length", "data_value": 100}],
                    },
                ],
            },
            {
                "type_name": "Vessel",
                "type_data": [
                    {
                        "object_data": [
                            {"data_name": "CalculateAddedMass", "data_value": True}
                        ]
                    }
                ],
            },
        ]
    },
    "run_simulation": {"calculate_statics": False},
    "sim2hdf5": {
        "datadef": [
            {
                "object_type": "Line",
                "object_name": "Ring Line",
                "object_extra": "oeEndA",
                "variable_names": ["Effective tension", "X", "Y", "Z"],
            },
            {
                "object_type": "3D buoy",
                "object_name": "Base centre",
                "object_extra": 0,
                "variable_names": ["X", "Y", "Z"],
            },
        ]
    },
}
